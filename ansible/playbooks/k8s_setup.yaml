- hosts: all
  become: true
  tasks:
    - name: Change hostnames
      hostname:
        name: "{{ hostvars[inventory_hostname]['private_dns_name'] }}"
      register: change_hostname_result

    - name: Disable swap
      ansible.posix.mount:
        name: swap
        fstype: swap
        state: absent
      register: disable_swap_result

    - name: Load br_netfilter module
      modprobe:
        name: br_netfilter
        state: present
      register: load_br_netfilter_result

    - name: Enable bridged traffic
      sysctl:
        name: "{{ item }}"
        value: '1'
        state: present
        reload: yes
      loop:
        - net.bridge.bridge-nf-call-ip6tables
        - net.bridge.bridge-nf-call-iptables
        - net.ipv4.ip_forward
      register: enable_bridged_traffic_result

    - name: Remove existing Kubernetes apt repository files
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - /etc/apt/sources.list.d/kubernetes.list
        - /etc/apt/sources.list.d/devel:kubic:libcontainers:stable.list
        - /etc/apt/sources.list.d/devel:kubic:libcontainers:stable:cri-o:*.list
      register: remove_k8s_repo_files_result

    - name: Remove existing Kubernetes apt keyrings
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - /etc/apt/trusted.gpg.d/kubernetes-apt-keyring.gpg
        - /etc/apt/keyrings/kubernetes-apt-keyring.gpg
      register: remove_k8s_keyrings_result

    - name: Update apt cache
      apt:
        update_cache: yes
      register: update_apt_cache_result

    - name: Install required packages
      apt:
        name:
          - apt-transport-https
          - curl
          - ca-certificates
          - docker.io
          - gnupg
        state: present
        update_cache: yes
      register: install_required_packages_result

    - name: Create Kubernetes GPG directory
      file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'
      register: create_k8s_gpg_directory_result

    - name: Download Kubernetes GPG key
      get_url:
        url: https://pkgs.k8s.io/core:/stable:/v1.27/deb/Release.key
        dest: /tmp/kubernetes.gpg
      register: download_k8s_gpg_key_result

    - name: Dearmor and add Kubernetes GPG key
      shell: cat /tmp/kubernetes.gpg | gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
      register: dearmor_k8s_gpg_key_result

    - name: Add Kubernetes repository
      copy:
        content: "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.27/deb/ /"
        dest: /etc/apt/sources.list.d/kubernetes.list
        mode: '0644'
      register: add_k8s_repository_result

    - name: Update apt cache
      apt:
        update_cache: yes
      register: update_apt_cache_result_2

    - name: Install Kubernetes components
      apt:
        name:
          - kubelet
          - kubeadm
          - kubectl
          - kubernetes-cni
        state: present
        update_cache: yes
      register: install_k8s_components_result

    - name: Hold Kubernetes packages
      dpkg_selections:
        name: "{{ item }}"
        selection: hold
      loop:
        - kubelet
        - kubeadm
        - kubectl
      register: hold_k8s_packages_result

    - name: Add ubuntu to docker group
      user:
        name: ubuntu
        groups: docker
        append: yes
      register: add_ubuntu_to_docker_group_result

    - name: Configure Docker cgroup driver
      copy:
        content: |
          {
            "exec-opts": ["native.cgroupdriver=systemd"]
          }
        dest: /etc/docker/daemon.json
        mode: '0644'
      register: configure_docker_cgroup_driver_result

    - name: Restart and enable Docker
      systemd:
        name: docker
        state: restarted
        enabled: yes
        daemon_reload: yes
      register: restart_enable_docker_result

    - name: Configure containerd
      shell: |
        containerd config default | tee /etc/containerd/config.toml
        sed -i 's/SystemdCgroup \= false/SystemdCgroup \= true/g' /etc/containerd/config.toml
      register: configure_containerd_result

    - name: Restart and enable containerd
      systemd:
        name: containerd
        state: restarted
        enabled: yes
      register: restart_enable_containerd_result

- hosts: role_master
  become: true
  tasks:
    - name: Pull Kubernetes images
      command: kubeadm config images pull
      register: pull_k8s_images_result

    - name: Initialize Kubernetes cluster
      command: kubeadm init --pod-network-cidr=10.244.0.0/16 --ignore-preflight-errors=All
      register: kubeadm_init_result

    - name: Setup kubeconfig for ubuntu user
      become_user: ubuntu
      file:
        path: /home/ubuntu/.kube
        state: directory
        mode: '0755'
      register: setup_kubeconfig_result

    - name: Copy admin.conf to user's kubeconfig
      copy:
        src: /etc/kubernetes/admin.conf
        dest: /home/ubuntu/.kube/config
        remote_src: yes
        owner: ubuntu
        group: ubuntu
        mode: '0644'
      register: copy_admin_conf_result

    - name: Install flannel pod network
      become_user: ubuntu
      command: kubectl apply -f https://github.com/coreos/flannel/raw/master/Documentation/kube-flannel.yml
      register: install_flannel_result

    - name: Generate join command
      command: kubeadm token create --print-join-command
      register: join_command_result

    - name: Set join command fact
      set_fact:
        worker_join: "{{ join_command_result.stdout_lines[0] }}"
      register: set_join_command_fact_result

    - name: Share join command
      set_fact:
        worker_join: "{{ worker_join }}"
      delegate_to: "{{ item }}"
      delegate_facts: true
      with_items: "{{ groups['role_worker'] }}"
      register: share_join_command_result

- hosts: role_worker
  become: true
  tasks:
    - name: Join workers to cluster
      command: "{{ worker_join }}"
      register: worker_join_result
      retries: 5
      delay: 30
      until: worker_join_result.rc == 0
      failed_when: "'timed out' in worker_join_result.stderr"
      ignore_errors: yes

    - name: Ensure nodes are ready
      command: kubectl wait --for=condition=Ready node --all --timeout=300s
      register: node_ready_result
      retries: 5
      delay: 30
      ignore_errors: yes

    - name: Remove not-ready taint from nodes
      command: kubectl taint nodes --all node.kubernetes.io/not-ready:NoSchedule-
      ignore_errors: yes

- hosts: role_master
  become: true
  tasks:
    - name: Remove not-ready taint from control-plane node
      command: kubectl taint nodes --all node-role.kubernetes.io/control-plane:NoSchedule-
      ignore_errors: yes

    - name: Verify all nodes are ready
      command: kubectl get nodes
      register: verify_nodes_result

    - name: Print verification result
      debug:
        msg: "{{ verify_nodes_result.stdout }}"
